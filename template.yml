AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Sample App
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AppId}-${AWS::Region}-PermissionsBoundary'
Parameters:
  AppId:
    Type: String
Resources:
  library1:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - nodejs14.x
      ContentUri: shared/library1/
      Description: Sample library for the project.
      RetentionPolicy: Delete
  library2:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - nodejs14.x
      ContentUri: shared/library2/
      Description: Sample library for the project.
      RetentionPolicy: Delete
  skill1Task1:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: sample-app-skill1-task1
      Layers:
        - !Ref library1
        - !Ref library2
      CodeUri: ./skills/skill1/task1
      Handler: task1.handler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 60
      Description: Sample task handler
      Policies:
        - AWSLambdaBasicExecutionRole
#        - Statement:
#              - Sid: LambdaAllowX
#                Effect: Allow
#                Action:
#                  - lambda:InvokeFunction
#                Resource: '*'
      Events:
        HttpPost:
          Type: Api
          Properties:
            Path: '/skill1/task1'
            Method: post
  skill1Task2:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: sample-app-skill1-task2
      Layers:
        - !Ref library2
      CodeUri: ./skills/skill1/task2
      Handler: task2.handler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 60
      Description: Sample task handler
      Policies:
        - AWSLambdaBasicExecutionRole
#        - Statement:
#              - Sid: LambdaAllowX
#                Effect: Allow
#                Action:
#                  - lambda:InvokeFunction
#                Resource: '*'
      Events:
        HttpPost:
          Type: Api
          Properties:
            Path: '/skill1/task2'
            Method: post

  skill2Task1:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: HelloWorldFunction
      Handler: helloworld.App::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM1: VALUE
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: '/skill2/task1'
            Method: get

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt skill2Task1.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt skill2Task1.Arn
